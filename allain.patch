From 72666d3cc3e3df61a85bcaaf531d441a169478b6 Mon Sep 17 00:00:00 2001
From: Allain Legacy <alegacy@redhat.com>
Date: Wed, 23 Oct 2024 15:07:36 -0400
Subject: [PATCH] Make ingress host and search api backend url optional

Signed-off-by: Allain Legacy <alegacy@redhat.com>
---
 .../oran-o2ims.clusterserviceversion.yaml     |  12 +-
 config/manager/inventory.yaml                 |   1 -
 config/manager/kustomization.yaml             |   2 +-
 config/rbac/role.yaml                         |   8 +
 internal/controllers/inventory_controller.go  |  33 ++-
 internal/controllers/utils/constants.go       |   3 +-
 internal/controllers/utils/utils.go           |  84 ++------
 internal/controllers/utils/utils_test.go      | 204 +-----------------
 8 files changed, 68 insertions(+), 279 deletions(-)

diff --git a/bundle/manifests/oran-o2ims.clusterserviceversion.yaml b/bundle/manifests/oran-o2ims.clusterserviceversion.yaml
index 659df20..675d119 100644
--- a/bundle/manifests/oran-o2ims.clusterserviceversion.yaml
+++ b/bundle/manifests/oran-o2ims.clusterserviceversion.yaml
@@ -1292,6 +1292,14 @@ spec:
           - get
           - patch
           - update
+        - apiGroups:
+          - operator.openshift.io
+          resources:
+          - ingresscontrollers
+          verbs:
+          - get
+          - list
+          - watch
         - apiGroups:
           - policy.open-cluster-management.io
           resources:
@@ -1404,12 +1412,12 @@ spec:
                 - --metrics-bind-address=127.0.0.1:8080
                 env:
                 - name: IMAGE
-                  value: quay.io/openshift-kni/oran-o2ims-operator:4.16.0
+                  value: quay.io/alegacy/oran-o2ims:4.16.0
                 - name: KUBE_RBAC_PROXY_IMAGE
                   value: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
                 - name: HWMGR_PLUGIN_NAMESPACE
                   value: oran-hwmgr-plugin
-                image: quay.io/openshift-kni/oran-o2ims-operator:4.16.0
+                image: quay.io/alegacy/oran-o2ims:4.16.0
                 livenessProbe:
                   httpGet:
                     path: /healthz
diff --git a/config/manager/inventory.yaml b/config/manager/inventory.yaml
index 3b2e7f2..e9103e2 100644
--- a/config/manager/inventory.yaml
+++ b/config/manager/inventory.yaml
@@ -1,7 +1,6 @@
 apiVersion: o2ims.oran.openshift.io/v1alpha1
 kind: Inventory
 metadata:
-  annotations:
   labels:
     app.kubernetes.io/created-by: oran-o2ims
     app.kubernetes.io/instance: o2ims
diff --git a/config/manager/kustomization.yaml b/config/manager/kustomization.yaml
index 7ea64b0..14bd099 100644
--- a/config/manager/kustomization.yaml
+++ b/config/manager/kustomization.yaml
@@ -4,7 +4,7 @@ kind: Kustomization
 resources:
 - manager.yaml
 - env-config.yaml
-- inventory.yaml
+#- inventory.yaml
 generatorOptions:
   disableNameSuffixHash: true
 
diff --git a/config/rbac/role.yaml b/config/rbac/role.yaml
index 1daed85..86a3989 100644
--- a/config/rbac/role.yaml
+++ b/config/rbac/role.yaml
@@ -250,6 +250,14 @@ rules:
   - get
   - patch
   - update
+- apiGroups:
+    - operator.openshift.io
+  resources:
+    - ingresscontrollers
+  verbs:
+    - get
+    - list
+    - watch
 - apiGroups:
   - policy.open-cluster-management.io
   resources:
diff --git a/internal/controllers/inventory_controller.go b/internal/controllers/inventory_controller.go
index 2f0b0a6..6d5c0db 100644
--- a/internal/controllers/inventory_controller.go
+++ b/internal/controllers/inventory_controller.go
@@ -48,6 +48,7 @@ import (
 	"sigs.k8s.io/controller-runtime/pkg/predicate"
 )
 
+//+kubebuilder:rbac:groups=operator.openshift.io,resources=ingresscontrollers,verbs=get;list;watch
 //+kubebuilder:rbac:groups=authentication.k8s.io,resources=tokenreviews,verbs=create
 //+kubebuilder:rbac:groups=authorization.k8s.io,resources=subjectaccessreviews,verbs=create
 //+kubebuilder:rbac:groups=o2ims.oran.openshift.io,resources=inventories,verbs=get;list;watch;create;update;patch;delete
@@ -428,7 +429,7 @@ func (t *reconcilerTask) setupOAuthClient(ctx context.Context) (*http.Client, er
 }
 
 // registerWithSmo sends a message to the SMO to register our identifiers and URL
-func (t *reconcilerTask) registerWithSmo(ctx context.Context) error {
+func (t *reconcilerTask) registerWithSmo(ctx context.Context, ingressHost string) error {
 	// Retrieve the local cluster id value.  It appears to always be identified as "version" in its metadata
 	clusterId, err := utils.GetClusterId(ctx, t.client, utils.ClusterVersionName)
 	if err != nil {
@@ -443,7 +444,7 @@ func (t *reconcilerTask) registerWithSmo(ctx context.Context) error {
 	data := utils.AvailableNotification{
 		GlobalCloudId: t.object.Spec.CloudId,
 		OCloudId:      clusterId,
-		ImsEndpoint:   fmt.Sprintf("https://%s/o2ims-infrastructureInventory/v1", t.object.Spec.IngressHost),
+		ImsEndpoint:   fmt.Sprintf("https://%s/o2ims-infrastructureInventory/v1", ingressHost),
 	}
 
 	body, err := json.Marshal(data)
@@ -466,7 +467,7 @@ func (t *reconcilerTask) registerWithSmo(ctx context.Context) error {
 }
 
 // setupSmo executes the high-level action set register with the SMO and set up the related conditions accordingly
-func (t *reconcilerTask) setupSmo(ctx context.Context) (err error) {
+func (t *reconcilerTask) setupSmo(ctx context.Context, ingressHost string) (err error) {
 	if t.object.Spec.SmoConfig == nil {
 		meta.SetStatusCondition(
 			&t.object.Status.DeploymentsStatus.Conditions,
@@ -481,7 +482,7 @@ func (t *reconcilerTask) setupSmo(ctx context.Context) (err error) {
 	}
 
 	if !utils.IsSmoRegistrationCompleted(t.object) {
-		err = t.registerWithSmo(ctx)
+		err = t.registerWithSmo(ctx, ingressHost)
 		if err != nil {
 			t.logger.ErrorContext(
 				ctx, "Failed to register with SMO.",
@@ -526,8 +527,22 @@ func (t *reconcilerTask) run(ctx context.Context) (nextReconcile ctrl.Result, er
 	// Set the default reconcile time to 5 minutes.
 	nextReconcile = ctrl.Result{RequeueAfter: 5 * time.Minute}
 
+	// Determine our ingress domain
+	ingressHost := t.object.Spec.IngressHost
+	if ingressHost == "" {
+		ingressHost, err = utils.GetIngressDomain(ctx, t.client)
+		if err != nil {
+			t.logger.ErrorContext(
+				ctx,
+				"Failed to get ingress domain.",
+				slog.String("error", err.Error()))
+			return
+		}
+		ingressHost = "o2ims." + ingressHost
+	}
+
 	// Register with SMO (if necessary)
-	err = t.setupSmo(ctx)
+	err = t.setupSmo(ctx, ingressHost)
 	if err != nil {
 		return
 	}
@@ -535,7 +550,7 @@ func (t *reconcilerTask) run(ctx context.Context) (nextReconcile ctrl.Result, er
 	// Create the needed Ingress if at least one server is required by the Spec.
 	if t.object.Spec.MetadataServerConfig.Enabled || t.object.Spec.DeploymentManagerServerConfig.Enabled ||
 		t.object.Spec.ResourceServerConfig.Enabled || t.object.Spec.AlarmSubscriptionServerConfig.Enabled {
-		err = t.createIngress(ctx)
+		err = t.createIngress(ctx, ingressHost)
 		if err != nil {
 			t.logger.ErrorContext(
 				ctx,
@@ -874,7 +889,7 @@ func (t *reconcilerTask) deployServer(ctx context.Context, serverName string) (u
 		},
 	}
 
-	deploymentContainerArgs, err := utils.GetServerArgs(ctx, t.client, t.object, serverName)
+	deploymentContainerArgs, err := utils.GetServerArgs(t.object, serverName)
 	if err != nil {
 		err2 := t.updateORANO2ISMUsedConfigStatus(
 			ctx, serverName, deploymentContainerArgs,
@@ -1060,7 +1075,7 @@ func (t *reconcilerTask) createService(ctx context.Context, resourceName string)
 	return nil
 }
 
-func (t *reconcilerTask) createIngress(ctx context.Context) error {
+func (t *reconcilerTask) createIngress(ctx context.Context, ingressHost string) error {
 	t.logger.InfoContext(ctx, "[createIngress]")
 	// Build the Ingress object.
 	ingressMeta := metav1.ObjectMeta{
@@ -1074,7 +1089,7 @@ func (t *reconcilerTask) createIngress(ctx context.Context) error {
 	ingressSpec := networkingv1.IngressSpec{
 		Rules: []networkingv1.IngressRule{
 			{
-				Host: t.object.Spec.IngressHost,
+				Host: ingressHost,
 				IngressRuleValue: networkingv1.IngressRuleValue{
 					HTTP: &networkingv1.HTTPIngressRuleValue{
 						Paths: []networkingv1.HTTPIngressPath{
diff --git a/internal/controllers/utils/constants.go b/internal/controllers/utils/constants.go
index 0728e24..e11dc6d 100644
--- a/internal/controllers/utils/constants.go
+++ b/internal/controllers/utils/constants.go
@@ -64,7 +64,8 @@ var (
 
 // Default values for backend URL and token:
 const (
-	defaultBackendURL       = "https://kubernetes.default.svc"
+	defaultApiServerURL     = "https://kubernetes.default.svc"
+	defaultSearchApiURL     = "https://search-search-api.open-cluster-management.svc.cluster.local:4010"
 	defaultBackendTokenFile = "/var/run/secrets/kubernetes.io/serviceaccount/token"          // nolint: gosec // hardcoded path only
 	defaultBackendCABundle  = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"         // nolint: gosec // hardcoded path only
 	defaultServiceCAFile    = "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt" // nolint: gosec // hardcoded path only
diff --git a/internal/controllers/utils/utils.go b/internal/controllers/utils/utils.go
index 01a1951..ed8feff 100644
--- a/internal/controllers/utils/utils.go
+++ b/internal/controllers/utils/utils.go
@@ -342,78 +342,35 @@ func GetBackendTokenArg(backendToken string) string {
 	return fmt.Sprintf("--backend-token-file=%s", defaultBackendTokenFile)
 }
 
-// getACMNamespace will determine the ACM namespace from the multiclusterengine object.
-//
-// multiclusterengine object sample:
-//
-//	apiVersion: multicluster.openshift.io/v1
-//	kind: MultiClusterEngine
-//	metadata:
-//	  labels:
-//	    installer.name: multiclusterhub
-//	    installer.namespace: open-cluster-management
-func getACMNamespace(ctx context.Context, c client.Client) (string, error) {
-	// Get the multiclusterengine object.
-	multiClusterEngine := &unstructured.Unstructured{}
-	multiClusterEngine.SetGroupVersionKind(schema.GroupVersionKind{
-		Group:   "multicluster.openshift.io",
-		Kind:    "MultiClusterEngine",
+// getIngressDomain will determine the network domain of the default ingress controller
+func GetIngressDomain(ctx context.Context, c client.Client) (string, error) {
+	ingressController := &unstructured.Unstructured{}
+	ingressController.SetGroupVersionKind(schema.GroupVersionKind{
+		Group:   "operator.openshift.io",
+		Kind:    "IngressController",
 		Version: "v1",
 	})
 	err := c.Get(ctx, client.ObjectKey{
-		Name: "multiclusterengine",
-	}, multiClusterEngine)
+		Name:      "default",
+		Namespace: "openshift-ingress-operator",
+	}, ingressController)
 
 	if err != nil {
-		oranUtilsLog.Info("[getACMNamespace] multiclusterengine object not found")
-		return "", fmt.Errorf("multiclusterengine object not found")
+		oranUtilsLog.Info(fmt.Sprintf("[getIngressDomain] default ingress controller object not found, error: %s", err))
+		return "", fmt.Errorf("default ingress controller object not found: %w", err)
 	}
 
-	// Get the ACM namespace by looking at the installer.namespace label.
-	multiClusterEngineMetadata := multiClusterEngine.Object["metadata"].(map[string]interface{})
-	multiClusterEngineLabels, labelsOk := multiClusterEngineMetadata["labels"]
+	spec := ingressController.Object["spec"].(map[string]interface{})
+	domain, ok := spec["domain"]
 
-	if labelsOk {
-		acmNamespace, acmNamespaceOk := multiClusterEngineLabels.(map[string]interface{})["installer.namespace"]
-
-		if !acmNamespaceOk {
-			return "", fmt.Errorf("multiclusterengine labels do not contain the installer.namespace key")
-		}
-		return acmNamespace.(string), nil
-	}
-
-	return "", fmt.Errorf("multiclusterengine object does not have expected labels")
-}
-
-// getSearchAPI will dynamically obtain the search API.
-func getSearchAPI(ctx context.Context, c client.Client, inventory *inventoryv1alpha1.Inventory) (string, error) {
-	// Find the ACM namespace.
-	acmNamespace, err := getACMNamespace(ctx, c)
-	if err != nil {
-		return "", err
-	}
-
-	// Split the Ingress to obtain the domain for the Search API.
-	// searchAPIBackendURL example: https://search-api-open-cluster-management.apps.lab.karmalabs.corp
-	// IngressHost example:         o2ims.apps.lab.karmalabs.corp
-	// Note: The domain could also be obtained from the spec.host of the search-api route in the
-	// ACM namespace.
-	ingressSplit := strings.Split(inventory.Spec.IngressHost, ".apps")
-	if len(ingressSplit) != 2 {
-		return "", fmt.Errorf("the searchAPIBackendURL could not be obtained from the IngressHost. " +
-			"Directly specify the searchAPIBackendURL in the Inventory CR or update the IngressHost")
+	if ok {
+		return domain.(string), nil
 	}
-	domain := ".apps" + ingressSplit[len(ingressSplit)-1]
 
-	// The searchAPI is obtained from the "search-api" string and the ACM namespace.
-	searchAPI := "https://" + "search-api-" + acmNamespace + domain
-
-	return searchAPI, nil
+	return "", fmt.Errorf("default ingress controller does not have expected 'spec.domain' attribute")
 }
 
-func GetServerArgs(ctx context.Context, c client.Client,
-	inventory *inventoryv1alpha1.Inventory,
-	serverName string) (result []string, err error) {
+func GetServerArgs(inventory *inventoryv1alpha1.Inventory, serverName string) (result []string, err error) {
 	// MetadataServer
 	if serverName == InventoryMetadataServerName {
 		result = slices.Clone(MetadataServerArgs)
@@ -429,10 +386,7 @@ func GetServerArgs(ctx context.Context, c client.Client,
 	if serverName == InventoryResourceServerName {
 		searchAPI := inventory.Spec.ResourceServerConfig.BackendURL
 		if searchAPI == "" {
-			searchAPI, err = getSearchAPI(ctx, c, inventory)
-			if err != nil {
-				return nil, err
-			}
+			searchAPI = defaultSearchApiURL
 		}
 
 		result = slices.Clone(ResourceServerArgs)
@@ -469,7 +423,7 @@ func GetServerArgs(ctx context.Context, c client.Client,
 		// API server of the cluster:
 		backendURL := inventory.Spec.DeploymentManagerServerConfig.BackendURL
 		if backendURL == "" {
-			backendURL = defaultBackendURL
+			backendURL = defaultApiServerURL
 		}
 
 		// Add the backend and token args:
diff --git a/internal/controllers/utils/utils_test.go b/internal/controllers/utils/utils_test.go
index 7149f91..f808df0 100644
--- a/internal/controllers/utils/utils_test.go
+++ b/internal/controllers/utils/utils_test.go
@@ -27,7 +27,6 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
-	"k8s.io/apimachinery/pkg/runtime/schema"
 	"k8s.io/apimachinery/pkg/types"
 	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
 	clusterv1 "open-cluster-management.io/api/cluster/v1"
@@ -81,15 +80,13 @@ var _ = Describe("ExtensionUtils", func() {
 				},
 			},
 		}
-		objs := []client.Object{Inventory}
-		fakeClient := getFakeClientFromObjects(objs...)
 
-		actualArgs, err := GetServerArgs(context.TODO(), fakeClient, Inventory, InventoryDeploymentManagerServerName)
+		actualArgs, err := GetServerArgs(Inventory, InventoryDeploymentManagerServerName)
 		Expect(err).ToNot(HaveOccurred())
 		expectedArgs := DeploymentManagerServerArgs
 		expectedArgs = append(expectedArgs,
 			fmt.Sprintf("--cloud-id=%s", Inventory.Spec.CloudId),
-			fmt.Sprintf("--backend-url=%s", defaultBackendURL),
+			fmt.Sprintf("--backend-url=%s", defaultApiServerURL),
 			fmt.Sprintf("--backend-token-file=%s", defaultBackendTokenFile),
 		)
 		expectedArgs = append(expectedArgs,
@@ -109,15 +106,12 @@ var _ = Describe("ExtensionUtils", func() {
 			},
 		}
 
-		objs := []client.Object{Inventory}
-		fakeClient := getFakeClientFromObjects(objs...)
-
-		actualArgs, err := GetServerArgs(context.TODO(), fakeClient, Inventory, InventoryDeploymentManagerServerName)
+		actualArgs, err := GetServerArgs(Inventory, InventoryDeploymentManagerServerName)
 		Expect(err).ToNot(HaveOccurred())
 		expectedArgs := DeploymentManagerServerArgs
 		expectedArgs = append(expectedArgs,
 			fmt.Sprintf("--cloud-id=%s", Inventory.Spec.CloudId),
-			fmt.Sprintf("--backend-url=%s", defaultBackendURL),
+			fmt.Sprintf("--backend-url=%s", defaultApiServerURL),
 			fmt.Sprintf("--backend-token-file=%s", defaultBackendTokenFile),
 		)
 		Expect(actualArgs).To(Equal(expectedArgs))
@@ -268,196 +262,6 @@ var _ = Describe("DoesK8SResourceExist", func() {
 	})
 })
 
-var _ = Describe("getACMNamespace", func() {
-
-	It("If multiclusterengine does not exist, return error", func() {
-		objs := []client.Object{}
-		fakeClient := getFakeClientFromObjects(objs...)
-		acmNamespace, err := getACMNamespace(context.TODO(), fakeClient)
-		Expect(err).To(HaveOccurred())
-		Expect(err.Error()).To(ContainSubstring("multiclusterengine object not found"))
-		Expect(acmNamespace).To(Equal(""))
-	})
-
-	It("If multiclusterengine exists without the expected labels, return error", func() {
-		u := &unstructured.Unstructured{}
-		u.Object = map[string]interface{}{
-			"metadata": map[string]interface{}{
-				"name": "multiclusterengine",
-				"labels": map[string]interface{}{
-					"installer.name": "multiclusterhub",
-				},
-			},
-			"spec": map[string]interface{}{
-				"targetNamespace": "multicluster-engine",
-			},
-		}
-
-		u.SetGroupVersionKind(schema.GroupVersionKind{
-			Group:   "multicluster.openshift.io",
-			Kind:    "MultiClusterEngine",
-			Version: "v1",
-		})
-
-		objs := []client.Object{u}
-		fakeClient := getFakeClientFromObjects(objs...)
-		acmNamespace, err := getACMNamespace(context.TODO(), fakeClient)
-		Expect(err).To(HaveOccurred())
-		Expect(err.Error()).To(ContainSubstring("multiclusterengine labels do not contain the installer.namespace key"))
-		Expect(acmNamespace).To(Equal(""))
-	})
-
-	It("If multiclusterengine exists with the expected labels, return the ACM namespace", func() {
-		mce := &unstructured.Unstructured{}
-		mce.Object = map[string]interface{}{
-			"metadata": map[string]interface{}{
-				"name": "multiclusterengine",
-				"labels": map[string]interface{}{
-					"installer.name":      "multiclusterhub",
-					"installer.namespace": "open-cluster-management",
-				},
-			},
-			"spec": map[string]interface{}{
-				"targetNamespace": "multicluster-engine",
-			},
-		}
-
-		mce.SetGroupVersionKind(schema.GroupVersionKind{
-			Group:   "multicluster.openshift.io",
-			Kind:    "MultiClusterEngine",
-			Version: "v1",
-		})
-
-		objs := []client.Object{mce}
-		fakeClient := getFakeClientFromObjects(objs...)
-		acmNamespace, err := getACMNamespace(context.TODO(), fakeClient)
-		Expect(err).ToNot(HaveOccurred())
-		Expect(acmNamespace).To(Equal("open-cluster-management"))
-	})
-})
-
-var _ = Describe("searchAPI", func() {
-	It("If there is an error in getACMNamespace, that error is returned", func() {
-		mce := &unstructured.Unstructured{}
-		mce.Object = map[string]interface{}{
-			"metadata": map[string]interface{}{
-				"name": "multiclusterengine",
-				"labels": map[string]interface{}{
-					"installer.name": "multiclusterhub",
-				},
-			},
-			"spec": map[string]interface{}{
-				"targetNamespace": "multicluster-engine",
-			},
-		}
-
-		mce.SetGroupVersionKind(schema.GroupVersionKind{
-			Group:   "multicluster.openshift.io",
-			Kind:    "MultiClusterEngine",
-			Version: "v1",
-		})
-
-		Inventory := &inventoryv1alpha1.Inventory{
-			ObjectMeta: metav1.ObjectMeta{
-				Name:      "oran-o2ims-sample-1",
-				Namespace: InventoryNamespace,
-			},
-			Spec: inventoryv1alpha1.InventorySpec{
-				DeploymentManagerServerConfig: inventoryv1alpha1.DeploymentManagerServerConfig{},
-				IngressHost:                   "o2ims.apps.lab.karmalabs.corp",
-			},
-		}
-
-		objs := []client.Object{mce, Inventory}
-		fakeClient := getFakeClientFromObjects(objs...)
-		searchAPI, err := getSearchAPI(context.TODO(), fakeClient, Inventory)
-		Expect(err).To(HaveOccurred())
-		Expect(err.Error()).To(ContainSubstring("multiclusterengine labels do not contain the installer.namespace key"))
-		Expect(searchAPI).To(Equal(""))
-	})
-
-	It("If the ingress host does not have the expected format (containing .apps), error is returned", func() {
-		mce := &unstructured.Unstructured{}
-		mce.Object = map[string]interface{}{
-			"metadata": map[string]interface{}{
-				"name": "multiclusterengine",
-				"labels": map[string]interface{}{
-					"installer.name":      "multiclusterhub",
-					"installer.namespace": "open-cluster-management",
-				},
-			},
-			"spec": map[string]interface{}{
-				"targetNamespace": "multicluster-engine",
-			},
-		}
-
-		mce.SetGroupVersionKind(schema.GroupVersionKind{
-			Group:   "multicluster.openshift.io",
-			Kind:    "MultiClusterEngine",
-			Version: "v1",
-		})
-
-		Inventory := &inventoryv1alpha1.Inventory{
-			ObjectMeta: metav1.ObjectMeta{
-				Name:      "oran-o2ims-sample-1",
-				Namespace: InventoryNamespace,
-			},
-			Spec: inventoryv1alpha1.InventorySpec{
-				DeploymentManagerServerConfig: inventoryv1alpha1.DeploymentManagerServerConfig{},
-				IngressHost:                   "o2ims.app.lab.karmalabs.corp",
-			},
-		}
-
-		objs := []client.Object{mce, Inventory}
-		fakeClient := getFakeClientFromObjects(objs...)
-		searchAPI, err := getSearchAPI(context.TODO(), fakeClient, Inventory)
-		Expect(searchAPI).To(BeEmpty())
-		Expect(err).To(HaveOccurred())
-		Expect(err.Error()).To(ContainSubstring(
-			"the searchAPIBackendURL could not be obtained from the IngressHost. " +
-				"Directly specify the searchAPIBackendURL in the Inventory CR or update the IngressHost"))
-	})
-
-	It("The ingress host has the expected format (containing .apps) and the searchAPI is returned", func() {
-		mce := &unstructured.Unstructured{}
-		mce.Object = map[string]interface{}{
-			"metadata": map[string]interface{}{
-				"name": "multiclusterengine",
-				"labels": map[string]interface{}{
-					"installer.name":      "multiclusterhub",
-					"installer.namespace": "open-cluster-management",
-				},
-			},
-			"spec": map[string]interface{}{
-				"targetNamespace": "multicluster-engine",
-			},
-		}
-
-		mce.SetGroupVersionKind(schema.GroupVersionKind{
-			Group:   "multicluster.openshift.io",
-			Kind:    "MultiClusterEngine",
-			Version: "v1",
-		})
-
-		Inventory := &inventoryv1alpha1.Inventory{
-			ObjectMeta: metav1.ObjectMeta{
-				Name:      "oran-o2ims-sample-1",
-				Namespace: InventoryNamespace,
-			},
-			Spec: inventoryv1alpha1.InventorySpec{
-				DeploymentManagerServerConfig: inventoryv1alpha1.DeploymentManagerServerConfig{},
-				IngressHost:                   "o2ims.apps.lab.karmalabs.corp",
-			},
-		}
-
-		objs := []client.Object{mce, Inventory}
-		fakeClient := getFakeClientFromObjects(objs...)
-		searchAPI, err := getSearchAPI(context.TODO(), fakeClient, Inventory)
-		Expect(err).ToNot(HaveOccurred())
-		Expect(searchAPI).To(Equal("https://search-api-open-cluster-management.apps.lab.karmalabs.corp"))
-	})
-})
-
 var testSchema = `
 properties:
   additionalNTPSources:
-- 
2.45.2


